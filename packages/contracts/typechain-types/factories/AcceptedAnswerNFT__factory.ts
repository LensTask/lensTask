/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  AcceptedAnswerNFT,
  AcceptedAnswerNFTInterface,
} from "../AcceptedAnswerNFT";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "moduleAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "MODULE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516102ee3803806102ee833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b6080516101d86101166000396000608b01526101d86000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063094d3a341461003b5780636a62784214610059575b600080fd5b610043610089565b60405161005091906100f5565b60405180910390f35b610073600480360381019061006e9190610141565b6100ad565b6040516100809190610187565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6000919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100df826100b4565b9050919050565b6100ef816100d4565b82525050565b600060208201905061010a60008301846100e6565b92915050565b600080fd5b61011e816100d4565b811461012957600080fd5b50565b60008135905061013b81610115565b92915050565b60006020828403121561015757610156610110565b5b60006101658482850161012c565b91505092915050565b6000819050919050565b6101818161016e565b82525050565b600060208201905061019c6000830184610178565b9291505056fea264697066735822122019fcd794a5f16e74f67feadcc00050984865144c2175f792f9398dd4e746400364736f6c63430008170033";

type AcceptedAnswerNFTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AcceptedAnswerNFTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AcceptedAnswerNFT__factory extends ContractFactory {
  constructor(...args: AcceptedAnswerNFTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    moduleAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(moduleAddress, overrides || {});
  }
  override deploy(
    moduleAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(moduleAddress, overrides || {}) as Promise<
      AcceptedAnswerNFT & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AcceptedAnswerNFT__factory {
    return super.connect(runner) as AcceptedAnswerNFT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AcceptedAnswerNFTInterface {
    return new Interface(_abi) as AcceptedAnswerNFTInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AcceptedAnswerNFT {
    return new Contract(address, _abi, runner) as unknown as AcceptedAnswerNFT;
  }
}
