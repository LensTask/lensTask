/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BountyCollectModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptedAnswerNFT"
      | "bountyStore"
      | "initialize"
      | "owner"
      | "paid"
      | "processAction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AnswerNFTSet" | "BountyInitialized" | "BountyPaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptedAnswerNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bountyStore",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paid", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "processAction",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptedAnswerNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bountyStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processAction",
    data: BytesLike
  ): Result;
}

export namespace AnswerNFTSetEvent {
  export type InputTuple = [nftContract: AddressLike];
  export type OutputTuple = [nftContract: string];
  export interface OutputObject {
    nftContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BountyInitializedEvent {
  export type InputTuple = [
    actionId: BytesLike,
    currency: AddressLike,
    amount: BigNumberish,
    asker: AddressLike
  ];
  export type OutputTuple = [
    actionId: string,
    currency: string,
    amount: bigint,
    asker: string
  ];
  export interface OutputObject {
    actionId: string;
    currency: string;
    amount: bigint;
    asker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BountyPaidEvent {
  export type InputTuple = [
    actionId: BytesLike,
    expert: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [actionId: string, expert: string, amount: bigint];
  export interface OutputObject {
    actionId: string;
    expert: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BountyCollectModule extends BaseContract {
  connect(runner?: ContractRunner | null): BountyCollectModule;
  waitForDeployment(): Promise<this>;

  interface: BountyCollectModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptedAnswerNFT: TypedContractMethod<[], [string], "view">;

  bountyStore: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, string, boolean] & {
        bountyCurrency: string;
        bountyAmount: bigint;
        asker: string;
        selectedExpert: string;
        isInitialized: boolean;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [actionId: BytesLike, asker: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paid: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  processAction: TypedContractMethod<
    [actionId: BytesLike, actor: AddressLike, processData: BytesLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptedAnswerNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bountyStore"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, string, string, boolean] & {
        bountyCurrency: string;
        bountyAmount: bigint;
        asker: string;
        selectedExpert: string;
        isInitialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [actionId: BytesLike, asker: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paid"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "processAction"
  ): TypedContractMethod<
    [actionId: BytesLike, actor: AddressLike, processData: BytesLike],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "AnswerNFTSet"
  ): TypedContractEvent<
    AnswerNFTSetEvent.InputTuple,
    AnswerNFTSetEvent.OutputTuple,
    AnswerNFTSetEvent.OutputObject
  >;
  getEvent(
    key: "BountyInitialized"
  ): TypedContractEvent<
    BountyInitializedEvent.InputTuple,
    BountyInitializedEvent.OutputTuple,
    BountyInitializedEvent.OutputObject
  >;
  getEvent(
    key: "BountyPaid"
  ): TypedContractEvent<
    BountyPaidEvent.InputTuple,
    BountyPaidEvent.OutputTuple,
    BountyPaidEvent.OutputObject
  >;

  filters: {
    "AnswerNFTSet(address)": TypedContractEvent<
      AnswerNFTSetEvent.InputTuple,
      AnswerNFTSetEvent.OutputTuple,
      AnswerNFTSetEvent.OutputObject
    >;
    AnswerNFTSet: TypedContractEvent<
      AnswerNFTSetEvent.InputTuple,
      AnswerNFTSetEvent.OutputTuple,
      AnswerNFTSetEvent.OutputObject
    >;

    "BountyInitialized(bytes32,address,uint256,address)": TypedContractEvent<
      BountyInitializedEvent.InputTuple,
      BountyInitializedEvent.OutputTuple,
      BountyInitializedEvent.OutputObject
    >;
    BountyInitialized: TypedContractEvent<
      BountyInitializedEvent.InputTuple,
      BountyInitializedEvent.OutputTuple,
      BountyInitializedEvent.OutputObject
    >;

    "BountyPaid(bytes32,address,uint256)": TypedContractEvent<
      BountyPaidEvent.InputTuple,
      BountyPaidEvent.OutputTuple,
      BountyPaidEvent.OutputObject
    >;
    BountyPaid: TypedContractEvent<
      BountyPaidEvent.InputTuple,
      BountyPaidEvent.OutputTuple,
      BountyPaidEvent.OutputObject
    >;
  };
}
