/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace Types {
  export type ProcessActionParamsStruct = {
    publicationActedProfileId: BigNumberish;
    publicationActedId: BigNumberish;
    actorProfileId: BigNumberish;
    actorProfileOwner: AddressLike;
    transactionExecutor: AddressLike;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referrerPubTypes: BigNumberish[];
    actionModuleData: BytesLike;
  };

  export type ProcessActionParamsStructOutput = [
    publicationActedProfileId: bigint,
    publicationActedId: bigint,
    actorProfileId: bigint,
    actorProfileOwner: string,
    transactionExecutor: string,
    referrerProfileIds: bigint[],
    referrerPubIds: bigint[],
    referrerPubTypes: bigint[],
    actionModuleData: string
  ] & {
    publicationActedProfileId: bigint;
    publicationActedId: bigint;
    actorProfileId: bigint;
    actorProfileOwner: string;
    transactionExecutor: string;
    referrerProfileIds: bigint[];
    referrerPubIds: bigint[];
    referrerPubTypes: bigint[];
    actionModuleData: string;
  };
}

export interface IPublicationActionModuleInterface extends Interface {
  getFunction(
    nameOrSignature: "initializePublicationAction" | "processPublicationAction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initializePublicationAction",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processPublicationAction",
    values: [Types.ProcessActionParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "initializePublicationAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPublicationAction",
    data: BytesLike
  ): Result;
}

export interface IPublicationActionModule extends BaseContract {
  connect(runner?: ContractRunner | null): IPublicationActionModule;
  waitForDeployment(): Promise<this>;

  interface: IPublicationActionModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  initializePublicationAction: TypedContractMethod<
    [
      profileId: BigNumberish,
      pubId: BigNumberish,
      transactionExecutor: AddressLike,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  processPublicationAction: TypedContractMethod<
    [processActionParams: Types.ProcessActionParamsStruct],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "initializePublicationAction"
  ): TypedContractMethod<
    [
      profileId: BigNumberish,
      pubId: BigNumberish,
      transactionExecutor: AddressLike,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processPublicationAction"
  ): TypedContractMethod<
    [processActionParams: Types.ProcessActionParamsStruct],
    [string],
    "nonpayable"
  >;

  filters: {};
}
